/*
 * ---------------------------------------------------------------------------
 *  Nextflow config file for use with Google Cloud & Google Life Sciences API
 * ---------------------------------------------------------------------------
 * Defines basic settings for running under the finngen-refinery-dev project
 */

workDir = "$TOWER_WORKDIR"

params {
  //Reference files
  hisat2_index = 'gs://juham-fg/rnaseq_complete_reference/hisat2_v2.2.1_index_v105/Homo_sapiens.GRCh38.dna.primary_assembly.hisat2_index'
  gtf_hisat2_index = 'gs://juham-fg/rnaseq_complete_reference/Ensembl_105/Homo_sapiens.GRCh38.105.gtf'
  gtf_fc = 'gs://juham-fg/rnaseq_complete_reference/GENCODE_v39/gencode.v39.annotation.nochr.gtf'
  fasta = 'gs://juham-fg/rnaseq_complete_reference/Homo_sapiens.GRCh38.dna.primary_assembly.fa'
  txrevise_gffs = 'gs://juham-fg/rnaseq_complete_reference/Homo_sapiens.GRCh38.105.txrevise.CAGE25/*.gff3'
  tx_fasta = 'gs://juham-fg/rnaseq_complete_reference/GENCODE_v39/gencode.v39.transcripts.fa'

  //Pipeline options
  run_ge_quant = true
  run_salmon = true
  run_txrevise = true
  run_exon_quant = true
  run_leafcutter = true
  skip_qc = false
  skip_multiqc = false
  skip_edger = false
  skip_alignment = false
  saveReference = false
  saveTrimmed = false
  saveAlignedIntermediates = false
  saveIndividualQuants = false

  //Output dir
  outdir = 'gs://juham-fg/eQTL/testing/'
}

tower {
  accessToken = "$TOWER_ACCESS_TOKEN"
  endpoint = 'http://0.0.0.0:8000/api'
  enabled = true
}

mail {
  from = "$TOWER_MAIL_FROM"
  smtp {
    host = "$TOWER_MAIL_HOST"
    port = "$TOWER_MAIL_PORT"
    user = "$TOWER_MAIL_USER"
    password = "$TOWER_MAIL_PASS"
  }
}

executor {
  queueSize = queueSize = 100000
}

google {
  region  = 'europe-west1'
  location = 'europe-west4'
  project = "$TOWER_GOOGLE_PROJECT"
  lifeSciences {
    serviceAccountEmail = "$TOWER_GOOGLE_SERVACC"
    network = 'default'
    subnetwork = 'default'
    // boot disk could be smaller e.g. 10G if the docker image for the process fits there
    // some docker images are too big for a 10G boot disk
    bootDiskSize = 15.GB
    preemptible = true
    usePrivateAddress = true
    sshDaemon = false
    keepAliveOnFailure = false
    debug = false
  }
  storage {
    maxParallelTransfers = 10
    parallelThreadCount = 4
    downloadMaxComponents = 8
    delayBetweenAttempts = 300
  }
}

//Get valid amount of cpus/memory
def get_valid(value, type) {
  //Google Cloud VM limitations for N1 machine series
  min_memory = 1.GB
  max_memory = 624.GB
  max_cpus = 96
  min_cpus = 1
  if (type == 'memory') {
    try {
      if (value.compareTo(max_memory as nextflow.util.MemoryUnit) == 1) {
        return max_memory as nextflow.util.MemoryUnit
      } else if (value.compareTo(min_memory as nextflow.util.MemoryUnit) == -1) {
        return min_memory as nextflow.util.MemoryUnit
      } else {
        return value
      }
    } catch (all) {
      println "   ### ERROR ###   Max memory '${max_memory}' is not valid! Using default value: $value"
      return value
    }
  } else if (type == 'cpus') {
    try {
      value = Math.min(value, max_cpus)
      value = Math.max(value, min_cpus)
      if (value > min_cpus) {
        value += (value % 2)
      }
      return value
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${max_cpus}' is not valid! Using default value: $value"
      return value
    }
  }
}

//Get machineType string according to Google Cloud limitations
def get_machineType(cpus, mem) {
  // Google VM mem/cpu ratio limits
  min_ratio = 1
  max_ratio = 6.5
  cpus = get_valid(cpus, "cpus")
  mem = get_valid(mem, "memory")
  ratio = mem.toGiga() / cpus
  if (ratio < min_ratio) {
    mem = [cpus, "GB"].join(".") as nextflow.util.MemoryUnit
  }
  machineType = ["custom", cpus, mem.getMega()].join("-")
  if (ratio > max_ratio) {
    machineType = [machineType, "ext"].join("-")
  }
  return machineType
}

process {
  executor = 'google-lifesciences'
  cache = 'lenient'

  // retry when preempted (10) or aborted/preempted (14) or weird 127 possibly file copy issue (127)
  // otherwise terminate workflow allowing submitted tasks to finish
  // https://cloud.google.com/life-sciences/docs/troubleshooting
  //errorStrategy = { task.exitStatus in [10,14,127,137] ? 'retry' : 'finish' }
  //maxRetries = 3

  errorStrategy = { task.exitStatus in [1] ? 'terminate' : 'retry' }
  maxRetries = 3
  maxErrors = '-1'

  cpus = 2
  memory = { 8.GB * task.attempt }

  // Process-specific resource requirements
  withName: 'align_reads:trim_galore' {
    machineType = {get_machineType(2, 16.GB * task.attempt)}
  }
  withName: 'align_reads:hisat2Align' {
    machineType = {get_machineType(8, 8.GB * task.attempt)}
  }
  withName: 'align_reads:hisat2_sortOutput' {
    machineType = {get_machineType(4, 128.GB * task.attempt)}
  }
  withName: 'align_reads:sort_by_name_BAM' {
    machineType = {get_machineType(8, 24.GB * task.attempt)}
  }
  withName: 'align_reads:makeHISATindex' {
    machineType = {get_machineType(10, 100.GB * task.attempt)}
  }
  withName: 'count_features:featureCounts' {
    machineType = {get_machineType(2, 16.GB * task.attempt)}
  }
  withName: 'count_features:merge_featureCounts' {
    machineType = {get_machineType(1, 64.GB * task.attempt)}
  }
  withName: 'quant_exons:makeDexSeqExonGFF' {
    machineType = {get_machineType(2, 8.GB * task.attempt)}
  }
  withName: 'quant_exons:count_exons' {
    machineType = {get_machineType(2, 8.GB * task.attempt)}
  }
  withName: 'quant_exons:exon_count_merge' {
    machineType = {get_machineType(1, 128.GB * task.attempt)}
  }
  withName: 'quant_tx:salmonQuant:makeSalmonIndex' {
    machineType = {get_machineType(10, 12.GB * task.attempt)}
  }
  withName: 'quant_tx:salmonQuant:salmon_quant' {
    machineType = {get_machineType(8, 12.GB * task.attempt)}
  }
  withName: 'quant_tx:salmonQuant:salmon_merge' {
    machineType = {get_machineType(1, 64.GB * task.attempt)}
  }
  withName: 'quant_txrev:salmonQuant:makeSalmonIndex' {
    machineType = {get_machineType(10, 12.GB * task.attempt)}
  }
  withName: 'quant_txrev:salmonQuant:salmon_quant' {
    machineType = {get_machineType(8, 24.GB * task.attempt)}
  }
  withName: 'quant_txrev:salmonQuant:salmon_merge' {
    machineType = {get_machineType(1, 64.GB * task.attempt)}
  }
  withName: 'quant_txrev:gff_to_fasta' {
    machineType = {get_machineType(1, 1.GB * task.attempt)}
  }
  withName: 'generate_mbv:run_mbv' {
    machineType = {get_machineType(2, 20.GB * task.attempt)}
  }
  withName: 'quant_leafcutter:bam_to_junc' {
    machineType = {get_machineType(1, 1.GB * task.attempt)}
  }
  withName: 'quant_leafcutter:cluster_introns' {
    machineType = {get_machineType(1, 24.GB * task.attempt)}
  }
  withName: 'createBigWig' {
    machineType = {get_machineType(16, 32.GB * task.attempt)}
  }
  withName: 'sample_correlation' {
    machineType = {get_machineType(2, 64.GB * task.attempt)}
  }
  // withName:multiqc {
  //   memory = { check_max( 2.GB * task.attempt, 'memory' ) }
  //   errorStrategy = 'ignore'
  // }
  // withName:get_software_versions {
  //   memory = { check_max( 2.GB, 'memory' ) }
  //   cache = false
  //   errorStrategy = 'ignore'
  // }
  // withName:workflow_summary_mqc {
  //   cpus = { check_max (1, 'cpus') }
  //   memory = { check_max( 2.GB, 'memory' ) }
  //   cache = false
  //   executor = 'local'
  //   errorStrategy = 'ignore'
  // }
}
